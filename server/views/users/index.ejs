<!DOCTYPE html>
<html lang='en'>
	<head>
		<meta charset='utf-8'>
		<title>Pac Man Lite</title>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
		<link rel="stylesheet" type="text/css" href="stylesheets/style.css">
	</head>
	<body>
		<div id='info'>
			<h1 class='yellow'>PACMAN LITE</h1>
			<h2 class='time'>Time: 99</h2>
			<h2 class='score'>Score: 0</h2>
		</div>
		<div id='container'></div>
		<div id='coins'></div>
		<div id='hero'></div>
		<div id='enemy'></div>
		<div id='end'></div>
		<div id='start'><button class='start'>Click to Start</button></div>
	</body>
</html>

<script type="text/javascript">
	// Global variable (mainly for setInterval)
	var game = new Game();
	var pacman = new Pacman(270, 510, 37);
	var ghost = new Ghost(270, 300, 38);

	var upPac;
	var upGho;
	var mainTime;
	var pacLoop = function() { pacman.update(game, ghost); }
	var ghostLoop = function() { ghost.update(game, pacman); }
	var timeLoop = function() { game.timer(); }

	var sound = {};
	sound.start = new Audio('sounds/pacman_beginning.wav');
	sound.background1 = new Audio('sounds/pacman_background.wav');
	sound.background2 = new Audio('sounds/pacman_power.wav');
    sound.eat = new Audio('sounds/pacman_chomp.wav');
    sound.power = new Audio('sounds/pacman_eatghost.wav')
    sound.die = new Audio('sounds/pacman_death.wav');
    sound.end = new Audio('sounds/pacman_intermission.wav');
    sound.bonus = new Audio('sounds/add_coins.wav');
	
	game.drawMap();
	game.drawCoins();
	pacman.draw();
	ghost.draw();
	sound.start.play();

	document.getElementById('start').onclick = function() {
		this.innerHTML = '';
		upPac = setInterval(pacLoop, 80);
		upGho = setInterval(ghostLoop, 80);
		mainTime = setInterval(timeLoop, 1000);
		sound.background1.loop = true;
		sound.background1.play();
	}

	document.onkeydown = function (e) {
		if (e.keyCode >= 37 && e.keyCode <= 40) {
			pacman.info.pos_temp = e.keyCode;
			pacman.detectCollision(game);
		}
	}

	function Game() {
		this.info = { tile: 10, conv: 3, timer: 0, timeRemaining: 99 };
		this.coins = [];
		this.map = [
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
				[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
				[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
				[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
				[0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0],
				[0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0],
				[0,0,0,0,1,0,0,0,9,0,9,0,0,0,1,0,0,0,0],
				[9,9,9,0,1,0,9,9,9,9,9,9,9,0,1,0,9,9,9],
				[0,0,0,0,1,0,9,0,0,9,0,0,9,0,1,0,0,0,0],
				[7,9,9,9,1,9,9,0,9,9,9,0,9,9,1,9,9,9,7],
				[0,0,0,0,1,0,9,0,0,0,0,0,9,0,1,0,0,0,0],
				[9,9,9,0,1,0,9,9,9,9,9,9,9,0,1,0,9,9,9],
				[0,0,0,0,1,0,9,0,0,0,0,0,9,0,1,0,0,0,0],
				[0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
				[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
				[0,1,1,0,1,1,1,1,1,9,1,1,1,1,1,0,1,1,0],
				[0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0],
				[0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0],
				[0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0],
				[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		];

		this.drawMap = function() {
			for (var i=0; i<this.map.length; i++){
				for (var j=0; j<this.map[i].length; j++){
					if (this.map[i][j] == 1 || this.map[i][j] == 7 || this.map[i][j] == 9){
						$('#container').append("<div class='path'></div>");
					}
					else if (this.map[i][j] == 0){
						$('#container').append("<div class='brick'></div>");
					}
				}
			}
		}

		this.drawCoins = function() {
            var id = 1;
            for (var i=0; i<(this.map.length); i++){
            	for (var j=0; j<(this.map[i].length); j++){
            		if (this.map[i][j] == 1){
            			var posY = i*30+42;
            			var posX = j*30+12;
            			$('#coins').append("<img id='" + id + "' class='coin'" +
            				"src='images/coin.jpg' style='top: " + posY + "px; left: " + posX + "px;'>");
            			this.coins.push({id: id, x: posX, y: posY});
            			id++;
            		}
            	}
            }

            // This replaces the coins from 4 special areas with power pellets
            $("img[id='23']").replaceWith("<img id='23' class='power'" +
            	"src='images/powerpellet.gif' style='top: 120px; left: 30px;'>");
            $("img[id='28']").replaceWith("<img id='28' class='power'" +
            	"src='images/powerpellet.gif' style='top: 120px; left: 510px;'>");
            $("img[id='102']").replaceWith("<img id='102' class='power'" +
            	"src='images/powerpellet.gif' style='top: 510px; left: 30px;'>");
            $("img[id='115']").replaceWith("<img id='115' class='power'" +
            	"src='images/powerpellet.gif' style='top: 510px; left: 510px;'>");                   
		}

		this.timer = function(){
			this.info.timeRemaining--;
			document.getElementById('info').children[1].innerHTML = "Time: " + this.info.timeRemaining;
			if (this.info.timeRemaining == 0){
				sound.background1.pause();
				sound.die.play();
				clearInterval(upPac);
				clearInterval(upGho);
				clearInterval(mainTime);
				$('#end').append("<p id='loser'>GAME OVER</p>");
			}
		}
	}

	function Pacman (x, y, pos) {
		this.info = { x: x, y: y, pos: pos, pos_temp: pos, collision: false, score: 0 };

		this.draw = function () {
			$('#hero').html("<img class='pacman' src='images/pacman" + this.info.pos +
				".gif' style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
		}

		this.update = function (game, ghost) {
    		this.detectCollision(game);
			this.move(game);
			this.draw();
			this.updateLife(game, ghost);
            this.updateCoins(game, ghost);
		}

		this.detectCollision = function (game) {
			var block = game.info.tile * game.info.conv;
            this.info.collision = false;
            // Only checks for collision when Pacman is in center of block (no overlap)
            if (this.info.y % block === 0 && this.info.x % block === 0) {
            	var x = this.info.x / block;
				var y = this.info.y / block;
				var left = game.map[y-1][Math.floor(x - 0.1)];
            	var up = game.map[Math.floor(y - 0.1)-1][x];
            	var right = game.map[y-1][Math.ceil(x + 0.1)];
            	var down = game.map[Math.ceil(y + 0.1)-1][x];
            	var options = [left, up, right, down];
            	// This means user is trying to change directions
	            if (this.info.pos !== this.info.pos_temp) {
	            	if (options[this.info.pos_temp - 37] === 1 || options[this.info.pos_temp - 37] === 9) {
	            		this.info.pos = this.info.pos_temp;
	            	}
	            }
	            // Checks if next block is a wall or a tunnel
            	if (options[this.info.pos - 37] === 0) {
            		this.info.collision = true;
            	}
            	else if (options[this.info.pos - 37] === undefined) {
            		this.info.collision = undefined;
            	}
            }
		}

		this.move = function (game) {
			var block = game.info.tile * game.info.conv;
			var sign = [-1, -1, 1, 1];
			if (this.info.collision === undefined){
				if (this.info.pos === 37){
					this.info.x = game.map[0].length * block - block;
				}
				else if (this.info.pos === 39) {
					this.info.x = 0;
				}
			}
			else if (this.info.collision === false){
				if (this.info.pos === 37 || this.info.pos === 39){
					this.info.x += sign[this.info.pos - 37] * game.info.tile;
				}
				else if (this.info.pos === 38 || this.info.pos === 40){
					this.info.y += sign[this.info.pos - 37] * game.info.tile;
				}
			}
		}

		this.updateCoins = function (game, ghost) {
			var that = this;
			var bonus;
			for (var i in game.coins){
				var delta = getDistance(this.info.x+15, game.coins[i].x, this.info.y+15, game.coins[i].y);
				if (delta <= 6){
					var el = document.getElementById(game.coins[i].id);
					var id = game.coins[i].id;
					if (id === 23 || id === 28 || id === 102 || id === 115){
						this.info.score += 100;
						sound.background1.pause();
						sound.background2.loop = true;
						sound.background2.play();
						$('#enemy').html("<img class='ghost' src='images/ghost2.gif' style='top: " +
							ghost.info.y + "px; left: " + ghost.info.x + "px;'>");
						ghost.info.mode = 'frightened';
						// Forces ghost to reverse direction
						if (ghost.info.pos <= 38) {
							ghost.info.pos += 2;
						}
						else {
							ghost.info.pos -= 2;
						}
						clearInterval(upGho);
						upGho = setInterval(ghostLoop, 100);
					}
					else {
						this.info.score += 10;
						sound.eat.play();
					}
					game.coins.splice(i, 1);
					document.getElementById('coins').removeChild(el);
					document.getElementById('info').children[2].innerHTML = "Score: " + this.info.score;
				}
			}
			if (game.coins.length === 0){
				clearInterval(upGho);
				clearInterval(upPac);
				clearInterval(mainTime);
				$('#end').append("<p id='winner'>YOU WIN!!!</p>");
				sound.background1.pause();
				sound.end.play();
				bonus = setInterval(timeBonus, 30);
			}

			function timeBonus() {
				that.info.score +=10;
				game.info.timeRemaining--;
				document.getElementById('info').children[2].innerHTML = "Score: " + that.info.score;
				document.getElementById('info').children[1].innerHTML = "Time: " + game.info.timeRemaining;
				sound.bonus.play();
				if (game.info.timeRemaining === 0){
					clearInterval(bonus);
				}
			}
		}

		this.updateLife = function (game, ghost) {
			var delta = getDistance(this.info.x, ghost.info.x, this.info.y, ghost.info.y);
			if (delta < 15) {
				if (ghost.info.mode === 'chase') {
					sound.background1.pause();
					sound.die.play();
					clearInterval(upGho);
					clearInterval(upPac);
					clearInterval(mainTime);
					$('#end').append("<p id='loser'>GAME OVER</p>");
					document.getElementById('hero').remove();
				}
				else {
					ghost.info.x = 270;
					ghost.info.y = 360;
					ghost.info.pos = 40;
					ghost.info.pos_temp = 40;
					ghost.info.mode = 'chase';
					this.info.score += 500;
					sound.power.play();
					document.getElementById('info').children[2].innerHTML = "Score: " + this.info.score;
				}
			}
		}
	}

	function Ghost (x, y, pos) {
		this.info = { x: x, y: y, pos: pos, pos_temp: pos, collision: false, mode: 'scatter' };
		var timer = 0;

		this.draw = function() {
			if (this.info.mode === 'chase' || this.info.mode === 'scatter') {
				$('#enemy').html("<img class='ghost' src='images/ghost.gif'" +
					"style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
			}
			else {
				$('#enemy').html("<img class='ghost' src='images/ghost2.gif'" +
					"style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
			}
		}

		this.update = function (game, pacman) {
			if (this.info.mode === 'chase' || this.info.mode === 'scatter') {
				sound.background2.pause();
				sound.background1.loop = true;
				sound.background1.play();
			}
			else {
				timer++;
				if (timer === 50) {
					this.info.mode = 'chase';
					clearInterval(upGho);
					upGho = setInterval(ghostLoop, 80);
					timer = 0;
				}
			}
			this.findPath(game, pacman);
			this.move(game);
			this.draw();
		}

		this.move = function (game) {
			var block = game.info.tile * game.info.conv;
			var options = [-1, -1, 1, 1];
			// Checks if going through tunnel
			if (this.info.collision === undefined){
				if (this.info.pos === 37){
					this.info.x = game.map[0].length * block - block;
				}
				else if (this.info.pos === 39) {
					this.info.x = 0;
				}
			}
			else if (this.info.collision === false){
				if (this.info.pos === 37 || this.info.pos === 39){
					this.info.x += options[this.info.pos - 37] * game.info.tile;
				}
				else if (this.info.pos === 38 || this.info.pos === 40){
					this.info.y += options[this.info.pos - 37] * game.info.tile;
				}
			}
		}

		this.findPath = function (game, pacman){
			var block = game.info.tile * game.info.conv;
			var x = this.info.x / block;
			var y = this.info.y / block;
			this.info.collision = false;

            // This prevents errors when in between blocks
            if (this.info.y % block === 0 && this.info.x % block === 0) {
				var left = game.map[y-1][Math.floor(x - 0.1)];
            	var up = game.map[Math.floor(y - 0.1)-1][x];
            	var right = game.map[y-1][Math.ceil(x + 0.1)];
            	var down = game.map[Math.ceil(y + 0.1)-1][x];
            	var options = [left, up, right, down];
            	var sign = [[-1, 0], [0, -1], [1, 0], [0, 1]];
            	var distance = [];
            	this.info.pos_temp = 37;

            	// Calculate distance between ghost and 'target'
            	if (this.info.mode === 'scatter') {
            		timer++;
            		// Timer cap 30 instead of 90 because it's only checking a third of the time
            		if (timer === 30) {
            			this.info.mode = 'chase';
            			timer = 0;
            		}
            		// Calculate distance between Pacman and top right tile
            		for (var i=0; i<4; i++) {
            			if (options[i] !== 0) {
            				distance[i] = getDistance(this.info.x + block*sign[i][0], game.map[0].length * block,
            										  this.info.y + block*sign[i][1], 0);
            			}
            		}
            	}
            	else {
            		// Calculate distance between Pacman and each possible Ghost path
            		for (var i=0; i<4; i++) {
            			if (options[i] !== 0) {
            				distance[i] = getDistance(this.info.x + block*sign[i][0], pacman.info.x,
            										  this.info.y + block*sign[i][1], pacman.info.y);
            			}
            		}
            	}

            	// Determine best path depending on the mode
            	if (this.info.mode === 'scatter' || this.info.mode === 'chase') {
            		var min = 1000;
            		// Find shortest path
            		for (var i=0; i<4; i++) {
            			if (distance[i] < min) {
            				min = distance[i];
            				this.info.pos_temp = 37 + i;
            			}
            		}

            		// If shortest path requires backtracking, need to find next shortest path
            		if (Math.abs(this.info.pos - this.info.pos_temp) === 2) {
            			distance[this.info.pos_temp - 37] = 1000;
            			min = 1000;
            			for (var i=0; i<4; i++) {
            				if (distance[i] < min) {
            					min = distance[i];
            					this.info.pos_temp = 37 + i;
            				}
            			}
            		}
            	}
            	else {
	            	var max = 0;
	            	// Find longest path
	            	for (var i=0; i<4; i++) {
	            		if (distance[i] > max) {
	            			max = distance[i];
	            			this.info.pos_temp = 37 + i;
	            		}
	            	}

	            	// If longest path requires backtracking, need to find next longest path
	            	if (Math.abs(this.info.pos - this.info.pos_temp) === 2) {
	            		distance[this.info.pos_temp - 37] = 0;
	            		max = 0;
	            		for (var i=0; i<4; i++) {
	            			if (distance[i] > max) {
	            				max = distance[i];
	            				this.info.pos_temp = 37 + i;
	            			}
	            		}
	            	}
            	}
            	// After all the calculations, update ghost's position
            	this.info.pos = this.info.pos_temp;

            	// Checks if next block is a tunnel
            	if (this.info.pos === 37 && left === undefined) {
            		this.info.collision = undefined;
            	}
            	else if (this.info.pos === 39 && right === undefined) {
            		this.info.collision = undefined;
            	}            
            }	           
        }
	}

	function getDistance(x1, x2, y1, y2){
		return Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
	}
</script>