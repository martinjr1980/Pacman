<!DOCTYPE html>
<html lang='en'>
<head>
	<meta charset='utf-8'>
	<title>Pac Man Lite</title>
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<link rel="stylesheet" type="text/css" href="stylesheets/style.css">
	<script type="text/javascript">

		function Game() {
			this.info = { tile: 10, conv: 3, timer: 0, timeRemaining: 99 };
			this.coins = [];
			this.map = [
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
					[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
					[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
					[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
					[0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0],
					[0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0],
					[0,0,0,0,1,0,0,0,9,0,9,0,0,0,1,0,0,0,0],
					[9,9,9,0,1,0,9,9,9,9,9,9,9,0,1,0,9,9,9],
					[0,0,0,0,1,0,9,0,0,0,0,0,9,0,1,0,0,0,0],
					[7,9,9,9,1,9,9,0,9,9,9,0,9,9,1,9,9,9,7],
					[0,0,0,0,1,0,9,0,0,9,0,0,9,0,1,0,0,0,0],
					[9,9,9,0,1,0,9,9,9,9,9,9,9,0,1,0,9,9,9],
					[0,0,0,0,1,0,9,0,0,0,0,0,9,0,1,0,0,0,0],
					[0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],
					[0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
					[0,1,1,0,1,1,1,1,1,9,1,1,1,1,1,0,1,1,0],
					[0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0],
					[0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0],
					[0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0],
					[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			];

			this.drawMap = function() {
				for (var i=0; i<this.map.length; i++){
					for (var j=0; j<this.map[i].length; j++){
						if (this.map[i][j] == 1 || this.map[i][j] == 7 || this.map[i][j] == 9){
							$('#container').append("<div class='path'></div>");
						}
						else if (this.map[i][j] == 0){
							$('#container').append("<div class='brick'></div>");
						}
					}
				}
			}

			this.drawCoins = function() {
	            var id = 1;
	            for (var i=0; i<(this.map.length); i++){
	            	for (var j=0; j<(this.map[i].length); j++){
	            		if (this.map[i][j] == 1){
	            			var posY = i*30+42;
	            			var posX = j*30+12;
	            			$('#coins').append("<img id='" + id + "' class='coin'" +
	            				"src='images/coin.jpg' style='top: " + posY + "px; left: " + posX + "px;'>");
	            			this.coins.push({id: id, x: posX, y: posY});
	            			id++;
	            		}
	            	}
	            }

	            $("img[id='23']").replaceWith("<img id='23' class='power'" +
	            	"src='images/powerpellet.gif' style='top: 120px; left: 30px;'>");
	            $("img[id='28']").replaceWith("<img id='28' class='power'" +
	            	"src='images/powerpellet.gif' style='top: 120px; left: 510px;'>");
	            $("img[id='102']").replaceWith("<img id='102' class='power'" +
	            	"src='images/powerpellet.gif' style='top: 510px; left: 30px;'>");
	            $("img[id='115']").replaceWith("<img id='115' class='power'" +
	            	"src='images/powerpellet.gif' style='top: 510px; left: 510px;'>");                   
			}

			this.timer = function(mainTime, sound){
				this.info.timeRemaining--;
				document.getElementById('info').children[1].innerHTML = "Time: " + this.info.timeRemaining;
				if (this.info.timeRemaining == 0){
					sound.die.play();
					// clearInterval(upPac);
					clearInterval(mainTime);
					$('#end').append("<p id='loser'>GAME OVER</p>");
				}
			}
		}

		function Pacman (x, y, pos) {
			this.info = { x: x, y: y, pos: pos, pos_temp: pos, collision: false, power: false, score: 0 };

			this.draw = function () {
				$('#hero').html("<img class='pacman' src='images/pacman" + this.info.pos +
					".gif' style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
			}

    		this.update = function (game, upPac, ghost, upGho, upGhoRun, mainTime, sound) {
	    		this.detectCollision(game);
				this.move(game);
				this.draw();
                this.updateCoins(game, upPac, ghost, upGho, upGhoRun, mainTime, sound);
    		}

			this.detectCollision = function (game) {
				var block = game.info.tile * game.info.conv;
	            this.info.collision = false;
	            // Only checks for collision when Pacman is in center of block (no overlap)
	            if (this.info.y % block === 0 && this.info.x % block === 0) {
	            	var x = this.info.x / block;
					var y = this.info.y / block;
					var left = game.map[y-1][Math.floor(x - 0.1)];
	            	var up = game.map[Math.floor(y - 0.1)-1][x];
	            	var right = game.map[y-1][Math.ceil(x + 0.1)];
	            	var down = game.map[Math.ceil(y + 0.1)-1][x];
	            	var options = [left, up, right, down];
	            	// This means user is trying to change directions
    	            if (this.info.pos !== this.info.pos_temp) {
    	            	if (options[this.info.pos_temp - 37] === 1 || options[this.info.pos_temp - 37] === 9) {
    	            		this.info.pos = this.info.pos_temp;
    	            	}
    	            }
    	            // Checks if next block is a wall or a tunnel
	            	if (options[this.info.pos - 37] === 0) {
	            		this.info.collision = true;
	            	}
	            	else if (options[this.info.pos - 37] === undefined) {
	            		this.info.collision = undefined;
	            	}
	            }
			}

			this.move = function (game) {
				var block = game.info.tile * game.info.conv;
				var sign = [-1, -1, 1, 1];
				if (this.info.collision === undefined){
					if (this.info.pos === 37){
						this.info.x = game.map[0].length * block - block;
					}
					else if (this.info.pos === 39) {
						this.info.x = 0;
					}
				}
				else if (this.info.collision === false){
					if (this.info.pos === 37 || this.info.pos === 39){
						this.info.x += sign[this.info.pos - 37] * game.info.tile;
					}
					else if (this.info.pos === 38 || this.info.pos === 40){
						this.info.y += sign[this.info.pos - 37] * game.info.tile;
					}
				}
			}

			this.updateCoins = function (game, upPac, ghost, upGho, upGhoRun, mainTime, sound) {
				for (var i in game.coins){
					var delta = getDistance(this.info.x+15, game.coins[i].x, this.info.y+15, game.coins[i].y);
					if (delta <= 6){
						var el = document.getElementById(game.coins[i].id);
						var id = game.coins[i].id;
						if (id === 23 || id === 28 || id === 102 || id === 115){
							this.info.score += 100;
							this.info.power = true;
							sound.power.play();
							$('#enemy').html("<img class='ghost' src='images/ghost2.gif' style='top: " +
								ghost.info.y + "px; left: " + ghost.info.x + "px;'>");
							clearInterval(upGho);
							ghost.info.run = true;
							var that = this;
							function ghostLoop() {
								ghost.update(game, upGho, that, sound);
								console.log('b');
							}
							upGho = setInterval(ghostLoop, 200);
						}
						else {
							this.info.score += 10;
							sound.eat.play();
						}
						game.coins.splice(i, 1);
						document.getElementById('coins').removeChild(el);
						document.getElementById('info').children[2].innerHTML = "Score: " + this.info.score;
					}
				}
				if (game.coins.length == 0){
					// clearInterval(upGho);
					clearInterval(upPac);
					$('#end').append("<p id='winner'>YOU WIN!!!</p>");
					sound.end.play();
					clearInterval(mainTime);
					// timeBonus = setInterval(timeBonus, 30);
				}
			}
		}

		function Ghost (x, y, pos) {
			this.info = { x: x, y: y, pos: pos, pos_temp: pos, collision: false, run: false };
			var timer = 0;

			this.draw = function() {
				if (this.info.run === false) {
					$('#enemy').html("<img class='ghost' src='images/ghost.gif'" +
						"style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
				}
				else {
					$('#enemy').html("<img class='ghost' src='images/ghost2.gif'" +
						"style='top: " + this.info.y + "px; left: " + this.info.x + "px;'>");
				}
			}

			this.update = function (game, upGho, pacman, sound) {
				if (this.info.run === true) {
					this.longestPath(game, pacman);
					timer++;
					if (timer === 20) {
						this.info.run = false;
						// clearInterval(upGho);
						// var that = this;
						// function ghostLoop() {
						// 	that.update(game, upGho, pacman, sound);
						// }
						// upGho = setInterval(ghostLoop, 80);
					}
				}
				else {
					timer = 0;
					this.shortestPath(game, pacman);
				}
				this.move(game);
				this.draw();
			}

			this.move = function (game) {
				var block = game.info.tile * game.info.conv;
				var options = [-1, -1, 1, 1];
				if (this.info.collision === undefined){
					if (this.info.pos === 37){
						this.info.x = game.map[0].length * block - block;
					}
					else if (this.info.pos === 39) {
						this.info.x = 0;
					}
				}
				else if (this.info.collision === false){
					if (this.info.pos === 37 || this.info.pos === 39){
						this.info.x += options[this.info.pos - 37] * game.info.tile;
					}
					else if (this.info.pos === 38 || this.info.pos === 40){
						this.info.y += options[this.info.pos - 37] * game.info.tile;
					}
				}
			}

			this.shortestPath = function (game, pacman){
				var block = game.info.tile * game.info.conv;
				this.info.collision = false;
	            // This prevents errors when inbetween blocks
	            if (this.info.y % block === 0 && this.info.x % block === 0) {
	            	var x = this.info.x / block;
	            	var y = this.info.y / block;
					var left = game.map[y-1][Math.floor(x - 0.1)];
	            	var up = game.map[Math.floor(y - 0.1)-1][x];
	            	var right = game.map[y-1][Math.ceil(x + 0.1)];
	            	var down = game.map[Math.ceil(y + 0.1)-1][x];
	            	var options = [left, up, right, down];
	            	var sign = [[-1, 0], [0, -1], [1, 0], [0, 1]];
	            	var distance = [1000, 1000, 1000, 1000];
	            	var min = 1000;

	            	// Calculate distance between Pacman and each possible Ghost path
	            	for (var i=0; i<4; i++) {
	            		if (options[i] !== 0) {
	            			distance[i] = getDistance(this.info.x + block*sign[i][0], pacman.info.x,
	            									  this.info.y + block*sign[i][1], pacman.info.y);
	            		}
	            	}

	            	// Find shortest path
	            	this.info.pos_temp = 37;
	            	for (var i=0; i<4; i++) {
	            		if (distance[i] < min) {
	            			min = distance[i];
	            			this.info.pos_temp = 37 + i;
	            		}
	            	}

	            	// If shortest path requires backtracking, need to find next shortest path
	            	if (Math.abs(this.info.pos - this.info.pos_temp) === 2) {
	            		distance[this.info.pos_temp - 37] = 1000;
	            		min = 1000;
	            		for (var i=0; i<4; i++) {
	            			if (distance[i] < min) {
	            				min = distance[i];
	            				this.info.pos_temp = 37 + i;
	            			}
	            		}
	            	}
	            	this.info.pos = this.info.pos_temp;

	            	// Checks if next block is a tunnel
	            	if (this.info.pos === 37 && left === undefined) {
	            		this.info.collision = undefined;
	            	}
	            	else if (this.info.pos === 39 && right === undefined) {
	            		this.info.collision = undefined;
	            	}
	            }
	        }

    		this.longestPath = function (game, pacman){
    			var block = game.info.tile * game.info.conv;
    			this.info.collision = false;
                // This prevents errors when inbetween blocks
                if (this.info.y % block === 0 && this.info.x % block === 0) {
                	var x = this.info.x / block;
                	var y = this.info.y / block;
    				var left = game.map[y-1][Math.floor(x - 0.1)];
                	var up = game.map[Math.floor(y - 0.1)-1][x];
                	var right = game.map[y-1][Math.ceil(x + 0.1)];
                	var down = game.map[Math.ceil(y + 0.1)-1][x];
                	var options = [left, up, right, down];
                	var sign = [[-1, 0], [0, -1], [1, 0], [0, 1]];
                	var distance = [0, 0, 0, 0];
                	var max = 0;

                	// Calculate distance between Pacman and each possible Ghost path
                	for (var i=0; i<4; i++) {
                		if (options[i] !== 0) {
                			distance[i] = getDistance(this.info.x + block*sign[i][0], pacman.info.x,
                									  this.info.y + block*sign[i][1], pacman.info.y);
                		}
                	}

                	// Find longest path
                	this.info.pos_temp = 37;
                	for (var i=0; i<4; i++) {
                		if (distance[i] > max) {
                			max = distance[i];
                			this.info.pos_temp = 37 + i;
                		}
                	}

                	// If longest path requires backtracking, need to find next longest path
                	if (Math.abs(this.info.pos - this.info.pos_temp) === 2) {
                		distance[this.info.pos_temp - 37] = 0;
                		max = 0;
                		for (var i=0; i<4; i++) {
                			if (distance[i] > max) {
                				max = distance[i];
                				this.info.pos_temp = 37 + i;
                			}
                		}
                	}
                	this.info.pos = this.info.pos_temp;

                	// Checks if next block is a tunnel
                	if (this.info.pos === 37 && left === undefined) {
                		this.info.collision = undefined;
                	}
                	else if (this.info.pos === 39 && right === undefined) {
                		this.info.collision = undefined;
                	}
                }
			}

		}

		function getDistance (x1, x2, y1, y2){
			return Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
		}

		$(document).ready(function(){
			var game = new Game();
			var pacman = new Pacman(270, 510, 39);
			var ghost = new Ghost(270, 360, 40);
			var upPac;
			var upGho;
			var upGhoRun;
			var mainTime;

			var sound = {};
			sound.start = new Audio('sounds/pacman_beginning.wav');
            sound.eat = new Audio('sounds/pacman_chomp.wav');
            sound.power = new Audio('sounds/pacman_eatghost.wav')
            sound.die = new Audio('sounds/pacman_death.wav');
            sound.end = new Audio('sounds/pacman_intermission.wav')
			
			game.drawMap();
			game.drawCoins();
			pacman.draw();
			ghost.draw();
			ghost.shortestPath(game, pacman);
			sound.start.play();

			$('#start').on('click', 'button', function(){
				$(this).remove();
				upPac = setInterval(pacLoop, 80);
				upGho = setInterval(ghostLoop, 120);
				mainTime = setInterval(timeLoop, 1000);
			})

			function pacLoop() {
				pacman.update(game, upPac, ghost, upGho, upGhoRun, mainTime, sound);
			}

			function ghostLoop() {
				ghost.update(game, upGho, pacman, sound);
				console.log('a');
			}

			function timeLoop() {
				game.timer(mainTime, sound);
			}

			document.onkeydown = function (e) {
				if (e.keyCode >= 37 && e.keyCode <= 40) {
					pacman.info.pos_temp = e.keyCode;
					pacman.detectCollision(game);
				}
			}
		});

	</script>
</head>
<body>
	<div id='info'>
		<h1 class='yellow'>PACMAN LITE</h1>
		<h2 class='time'>Time: 99</h2>
		<h2 class='score'>Score: 0</h2>
	</div>
	<div id='container'></div>
	<div id='coins'></div>
	<div id='hero'></div>
	<div id='enemy'></div>
	<div id='end'></div>
	<div id='start'><button class='start'>Click to Start</button></div>
</body>
</html>